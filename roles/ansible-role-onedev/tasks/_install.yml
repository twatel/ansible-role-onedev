---
- name: Ensure APT cache
  apt: 
    update_cache: yes
  changed_when: false

- name: Install required APT packages
  apt: 
    name: "{{ onedev_required_apt_packages }}"
    state: present

- name: Ensure One-dev installation dir
  file:
    path: "{{ onedev_destination_directory }}"
    state: directory

- name: Ensure One-dev installation exists
  stat:
    path: "{{ onedev_installation_directory }}"
  register: onedev_directory

- name: Unarchive One-dev application archive
  ansible.builtin.unarchive:
    src: "{{ onedev_package_url }}"
    dest: "{{ onedev_destination_directory }}"
    creates: "{{ onedev_installation_directory }}"
    remote_src: yes
  when: not onedev_directory.stat.exists

- name: Create One-dev configuration variables
  template:
    src: "sh_server_vars.j2"
    dest: "{{ onedev_installation_directory }}/onedev_vars"
    mode: 750
  register: onedev_vars_file

- name: Set server.sh variables
  ansible.builtin.lineinfile:
    path: "{{ onedev_installation_directory }}/bin/server.sh"
    regexp: '{{ item.regexp }}'
    line: '{{ item.line }}'
    mode: '755'
  loop:
    - { regexp: '^FILES_TO_SOURCE=', line: 'FILES_TO_SOURCE="{{ onedev_installation_directory }}/onedev_vars"' }

- name: Set database configuration
  template:
    src: hibernate.properties.j2
    dest: "{{ onedev_installation_directory }}/conf/hibernate.properties"

- name: Download .jar modules
  ansible.builtin.get_url:
    url: "{{ item }}"
    dest: "{{ onedev_installation_directory }}/site/lib/"
    mode: '0750'
  loop: "{{ onedev_required_jar_modules }}"
  when:
    - onedev_required_jar_modules is defined
    - (onedev_required_jar_modules | length) > 0

# return "1" when server is not installed
- name: Ensure server is installed
  shell: "./server.sh status | grep -i 'not installed' | wc -l"
  args:
    chdir: "{{ onedev_installation_directory }}/bin"
  changed_when: false
  register: onedev_is_installed

# Install server when not already installed
- name: Install & Start One-dev service
  command: ./server.sh installstart
  args:
    chdir: "{{ onedev_installation_directory }}/bin"
  when: 
    - onedev_is_installed.stdout == '1'

# Reload server already installed and configuration has changed
- name: Reconfigure One-dev service
  command: ./server.sh condrestart
  args:
    chdir: "{{ onedev_installation_directory }}/bin"
  when: 
    - onedev_is_installed.stdout == '0'
    - onedev_vars_file is changed

